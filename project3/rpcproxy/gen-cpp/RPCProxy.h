/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RPCProxy_H
#define RPCProxy_H

#include <thrift/TDispatchProcessor.h>
#include "RPCProxy_types.h"

namespace rpcproxy {

class RPCProxyIf {
 public:
  virtual ~RPCProxyIf() {}
  virtual void hello() = 0;
};

class RPCProxyIfFactory {
 public:
  typedef RPCProxyIf Handler;

  virtual ~RPCProxyIfFactory() {}

  virtual RPCProxyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RPCProxyIf* /* handler */) = 0;
};

class RPCProxyIfSingletonFactory : virtual public RPCProxyIfFactory {
 public:
  RPCProxyIfSingletonFactory(const boost::shared_ptr<RPCProxyIf>& iface) : iface_(iface) {}
  virtual ~RPCProxyIfSingletonFactory() {}

  virtual RPCProxyIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RPCProxyIf* /* handler */) {}

 protected:
  boost::shared_ptr<RPCProxyIf> iface_;
};

class RPCProxyNull : virtual public RPCProxyIf {
 public:
  virtual ~RPCProxyNull() {}
  void hello() {
    return;
  }
};


class RPCProxy_hello_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  RPCProxy_hello_args() {
  }

  virtual ~RPCProxy_hello_args() throw() {}


  bool operator == (const RPCProxy_hello_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCProxy_hello_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCProxy_hello_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCProxy_hello_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~RPCProxy_hello_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCProxy_hello_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  RPCProxy_hello_result() {
  }

  virtual ~RPCProxy_hello_result() throw() {}


  bool operator == (const RPCProxy_hello_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCProxy_hello_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCProxy_hello_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCProxy_hello_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~RPCProxy_hello_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RPCProxyClient : virtual public RPCProxyIf {
 public:
  RPCProxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RPCProxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void hello();
  void send_hello();
  void recv_hello();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RPCProxyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RPCProxyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RPCProxyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_hello(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RPCProxyProcessor(boost::shared_ptr<RPCProxyIf> iface) :
    iface_(iface) {
    processMap_["hello"] = &RPCProxyProcessor::process_hello;
  }

  virtual ~RPCProxyProcessor() {}
};

class RPCProxyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RPCProxyProcessorFactory(const ::boost::shared_ptr< RPCProxyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RPCProxyIfFactory > handlerFactory_;
};

class RPCProxyMultiface : virtual public RPCProxyIf {
 public:
  RPCProxyMultiface(std::vector<boost::shared_ptr<RPCProxyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RPCProxyMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RPCProxyIf> > ifaces_;
  RPCProxyMultiface() {}
  void add(boost::shared_ptr<RPCProxyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void hello() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hello();
    }
    ifaces_[i]->hello();
  }

};

} // namespace

#endif
